version: '3.8'

services:
  # Redis for caching and real-time data
  redis:
    image: redis:7-alpine
    container_name: houston-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - houston-network

  # PostgreSQL database for persistent data
  postgres:
    image: postgres:15-alpine
    container_name: houston-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=houston_oil_airs
      - POSTGRES_USER=houston_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-houston_pass}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U houston_user -d houston_oil_airs"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - houston-network

  # Backend services (C++, Java, Node.js)
  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.backend
    container_name: houston-backend
    ports:
      - "3001:3001"  # Node.js server
      - "8080:8080"  # Java services
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=houston_oil_airs
      - POSTGRES_USER=houston_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-houston_pass}
      - JAVA_SERVICE_URL=http://localhost:8080
      - FRONTEND_URL=http://frontend
    volumes:
      - backend_logs:/app/logs
      - ./backend_config.json:/app/config/config.json:ro
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - houston-network
    restart: unless-stopped

  # Frontend application
  frontend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.frontend
    container_name: houston-frontend
    ports:
      - "80:80"
      - "443:443"
    environment:
      - BACKEND_URL=http://backend:3001
    volumes:
      - ./ssl:/etc/nginx/ssl:ro
      - frontend_logs:/var/log/nginx
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - houston-network
    restart: unless-stopped

  # Monitoring and metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: houston-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - houston-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: houston-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - houston-network
    restart: unless-stopped

  # Log aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.0
    container_name: houston-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - houston-network
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.5.0
    container_name: houston-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - houston-network
    restart: unless-stopped

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  backend_logs:
    driver: local
  frontend_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  houston-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
