name: üöÄ Houston Oil Airs CI/CD Pipeline
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security scanning
  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

  # Frontend testing and building
  frontend:
    name: üé® Frontend Pipeline
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm run test

      - name: Build application
        run: npm run build

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist

  # Backend testing and building
  backend:
    name: ‚öôÔ∏è Backend Pipeline
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      # C++ Build
      - name: Setup C++ Build Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build libjsoncpp-dev libboost-all-dev

      - name: Build C++ Engine
        working-directory: backend/cpp-engine
        run: |
          mkdir -p build && cd build
          cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release
          ninja

      # Java Build
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Build Java Services
        working-directory: backend/java-services
        run: |
          chmod +x gradlew
          ./gradlew build test

      # Node.js Build
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: backend/node-server/package-lock.json

      - name: Install Node.js dependencies
        working-directory: backend/node-server
        run: npm ci

      - name: Run Node.js tests
        working-directory: backend/node-server
        run: npm test
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          NODE_ENV: test

  # Docker build and push
  docker:
    name: üê≥ Docker Build & Push
    runs-on: ubuntu-latest
    needs: [frontend, backend, security-scan]
    if: github.event_name == 'push'

    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.backend
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.frontend
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}

  # End-to-end testing
  e2e-tests:
    name: üß™ E2E Tests
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Start application stack
        run: |
          docker-compose -f docker/docker-compose.yml up -d
          sleep 30  # Wait for services to start

      - name: Setup Node.js for E2E tests
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install Playwright
        working-directory: frontend
        run: |
          npm ci
          npx playwright install --with-deps

      - name: Run E2E tests
        working-directory: frontend
        run: npm run test:e2e

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: frontend/test-results/

  # Performance testing
  performance:
    name: ‚ö° Performance Tests
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Start application
        run: docker-compose -f docker/docker-compose.yml up -d

      - name: Wait for application
        run: |
          sleep 30
          curl --retry 10 --retry-delay 5 --retry-connrefused http://localhost/health

      - name: Run Lighthouse Performance Test
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost
            http://localhost/research
            http://localhost/visualization
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Setup Metrics
        uses: lowlighter/metrics@latest
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          debug: false
