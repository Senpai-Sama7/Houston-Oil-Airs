"use strict";(()=>{var a={};a.id=164,a.ids=[164],a.modules={436:(a,b,c)=>{c.a(a,async(a,d)=>{try{c.r(b),c.d(b,{config:()=>o,default:()=>n,handler:()=>m});var e=c(9046),f=c(8667),g=c(3480),h=c(6435),i=c(2593),j=c(8112),k=c(8766),l=a([i]);i=(l.then?(await l)():l)[0];let n=(0,h.M)(i,"default"),o=(0,h.M)(i,"config"),p=new g.PagesAPIRouteModule({definition:{kind:f.A.PAGES_API,page:"/api/compensation/claim",pathname:"/api/compensation/claim",bundlePath:"",filename:""},userland:i,distDir:".next",relativeProjectDir:""});async function m(a,b,c){let d=await p.prepare(a,b,{srcPage:"/api/compensation/claim"});if(!d){b.statusCode=400,b.end("Bad Request"),null==c.waitUntil||c.waitUntil.call(c,Promise.resolve());return}let{query:f,params:g,prerenderManifest:h,routerServerContext:i}=d;try{let c=a.method||"GET",d=(0,j.getTracer)(),e=d.getActiveScopeSpan(),l=p.instrumentationOnRequestError.bind(p),m=async e=>p.render(a,b,{query:{...f,...g},params:g,allowedRevalidateHeaderKeys:[],multiZoneDraftMode:!1,trustHostHeader:!1,previewProps:h.preview,propagateError:!1,dev:p.isDev,page:"/api/compensation/claim",internalRevalidate:null==i?void 0:i.revalidate,onError:(...b)=>l(a,...b)}).finally(()=>{if(!e)return;e.setAttributes({"http.status_code":b.statusCode,"next.rsc":!1});let f=d.getRootSpanAttributes();if(!f)return;if(f.get("next.span_type")!==k.BaseServerSpan.handleRequest)return void console.warn(`Unexpected root span type '${f.get("next.span_type")}'. Please report this Next.js issue https://github.com/vercel/next.js`);let g=f.get("next.route");if(g){let a=`${c} ${g}`;e.setAttributes({"next.route":g,"http.route":g,"next.span_name":a}),e.updateName(a)}else e.updateName(`${c} ${a.url}`)});e?await m(e):await d.withPropagatedContext(a.headers,()=>d.trace(k.BaseServerSpan.handleRequest,{spanName:`${c} ${a.url}`,kind:j.SpanKind.SERVER,attributes:{"http.method":c,"http.target":a.url}},m))}catch(a){if(p.isDev)throw a;(0,e.sendError)(b,500,"Internal Server Error")}finally{null==c.waitUntil||c.waitUntil.call(c,Promise.resolve())}}d()}catch(a){d(a)}})},2593:(a,b,c)=>{c.a(a,async(a,d)=>{try{c.r(b),c.d(b,{default:()=>h});var e=c(9527),f=c(4939),g=a([e,f]);[e,f]=g.then?(await g)():g;let i=new f.Pool({host:process.env.DB_HOST||"localhost",port:parseInt(process.env.DB_PORT||"5432"),database:process.env.DB_NAME||"houston_ej_ai",user:process.env.DB_USER||"houston",password:process.env.DB_PASSWORD||"ej_ai_2024"}),j={rpcUrl:process.env.BLOCKCHAIN_RPC_URL||"https://polygon-rpc.com",privateKey:process.env.COMPENSATION_PRIVATE_KEY,contractAddress:process.env.COMPENSATION_CONTRACT_ADDRESS,gasLimit:1e5,maxGasPrice:e.ethers.parseUnits("50","gwei")},k=["function transfer(address to, uint256 amount) returns (bool)","function balanceOf(address account) view returns (uint256)","event Transfer(address indexed from, address indexed to, uint256 value)"];async function h(a,b){if("POST"!==a.method)return b.status(405).json({success:!1,error:"Method not allowed"});try{let{walletAddress:c,amount:d}=a.body;if(!c||!e.ethers.isAddress(c))return b.status(400).json({success:!1,error:"Invalid wallet address"});if(!d||d<=0||d>1)return b.status(400).json({success:!1,error:"Invalid amount (must be between $0.01 and $1.00)"});let f=await i.query(`
      SELECT pm25 FROM air_quality 
      WHERE time >= NOW() - INTERVAL '1 hour'
      ORDER BY time DESC LIMIT 1
    `);if(0===f.rows.length||f.rows[0].pm25<35)return b.status(400).json({success:!1,error:"Compensation only available when PM2.5 > 35 \xb5g/m\xb3"});if((await i.query(`
      SELECT id FROM compensation_claims 
      WHERE wallet_address = $1 AND claim_time >= NOW() - INTERVAL '1 hour'
    `,[c])).rows.length>0)return b.status(400).json({success:!1,error:"Only one claim per hour allowed"});let g=null,h="pending";if(j.privateKey&&j.contractAddress)try{let a=new e.ethers.JsonRpcProvider(j.rpcUrl),b=new e.ethers.Wallet(j.privateKey,a),f=new e.ethers.Contract(j.contractAddress,k,b),i=e.ethers.parseEther(d.toString()),l=await f.transfer(c,i,{gasLimit:j.gasLimit,maxFeePerGas:j.maxGasPrice});g=l.hash;let m=await l.wait(1);h=1===m.status?"confirmed":"failed"}catch(a){h="failed"}let l=(await i.query(`
      INSERT INTO compensation_claims 
      (wallet_address, amount, claim_time, transaction_hash, status)
      VALUES ($1, $2, NOW(), $3, $4)
      RETURNING id, transaction_hash
    `,[c,d,g,h])).rows[0].id;b.status(200).json({success:"failed"!==h,transactionHash:g||void 0,transactionId:`claim_${l}`,status:h})}catch(a){b.status(500).json({success:!1,error:"Failed to process blockchain transaction"})}}d()}catch(a){d(a)}})},4939:a=>{a.exports=import("pg")},5600:a=>{a.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},9527:a=>{a.exports=import("ethers")}};var b=require("../../../webpack-api-runtime.js");b.C(a);var c=b.X(0,[169],()=>b(b.s=436));module.exports=c})();